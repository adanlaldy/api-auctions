generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Likes {
  id         Int     @id @default(autoincrement())
  user_id    Int
  auction_id Int
  auction    Auction @relation(fields: [auction_id], references: [id], map: "Likes_auction_id_fk")
  user       Users   @relation(fields: [user_id], references: [id], map: "Likes_user_id_fk")

  @@index([user_id], map: "Like_user_id_fkey")
  @@index([auction_id], map: "Likes_auction_id_fkey")
}

model Messages {
  id              Int           @id @default(autoincrement())
  message         String        @db.Text
  conversation_id Int
  created_at      DateTime      @default(now())
  is_read         Boolean       @default(false)
  conversation    Conversations @relation(fields: [conversation_id], references: [id], map: "Messages_conversation_id_fk")

  @@index([conversation_id], map: "Messages_conversation_id_fkey")
}

model Conversations {
  id              Int        @id @default(autoincrement())
  last_message_at DateTime?
  created_at      DateTime   @default(now())
  user1_id        Int
  user2_id        Int
  user1           Users      @relation("User1", fields: [user1_id], references: [id], map: "Conversation_user1_id_fk")
  user2           Users      @relation("User2", fields: [user2_id], references: [id], map: "Conversation_user2_id_fk")
  message         Messages[]

  @@index([user1_id], map: "Conversation_user1_id_fkey")
  @@index([user2_id], map: "Conversation_user2_id_fkey")
}

model Notifications {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  user_id    Int
  auction_id Int
  message_id Int?
  auction    Auction  @relation(fields: [auction_id], references: [id], map: "Notifications_auction_id_fk")
  user       Users    @relation(fields: [user_id], references: [id], map: "Notifications_user_id_fk")

  @@index([user_id], map: "Notification_user_id_fkey")
  @@index([auction_id], map: "Notifications_auction_id_fkey")
}

model Purchases {
  id            Int      @id @default(autoincrement())
  purchase_date DateTime @default(now())
  final_price   Float
  auction_id    Int
  user_id       Int
  auction       Auction  @relation(fields: [auction_id], references: [id], map: "Purchases_auction_id_fk")
  user          Users    @relation(fields: [user_id], references: [id], map: "Purchases_user_id_fk")

  @@index([user_id], map: "Purchase_user_id_fkey")
  @@index([auction_id], map: "Purchases_auction_id_fkey")
}

model Users {
  id            Int             @id @default(autoincrement())
  first_name    String          @db.VarChar(255)
  last_name     String          @db.VarChar(255)
  birth_date    DateTime        @db.Date
  email         String          @db.VarChar(255)
  password      String          @db.VarChar(255)
  picture       String?         @db.VarChar(255)
  balance       Float
  role          String          @db.VarChar(255)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @db.Date
  deleted_at    DateTime?       @db.Date
  buyer         Auction[]       @relation("Buyer", map: "Buyer_fkey")
  seller        Auction[]       @relation("Seller", map: "Seller_fkey")
  user1         Conversations[] @relation("User1", map: "User1_fkey")
  user2         Conversations[] @relation("User2", map: "User2_fkey")
  likes         Likes[]
  notifications Notifications[]
  purchases     Purchases[]
}

model File {
  id          Int       @id @default(autoincrement())
  content     String
  contentType String
  auctions    Auction[]
}

model Auction {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  fileId         Int
  initialPrice   Float
  actualBidPrice Float
  startBidDate   DateTime
  endBidDate     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  tagId          Int
  sellerId       Int
  buyerId        Int?
  stateId        Int
  buyer          Users?          @relation("Buyer", fields: [buyerId], references: [id], map: "Auction_buyerId_fk")
  file           File            @relation(fields: [fileId], references: [id], map: "Auction_fileId_fk")
  seller         Users           @relation("Seller", fields: [sellerId], references: [id], map: "Auction_sellerId_fk")
  state          State           @relation(fields: [stateId], references: [id], map: "Auction_stateId_fk")
  tag            Tag             @relation(fields: [tagId], references: [id], map: "Auction_tagId_fk")
  likes          Likes[]         @relation(map: "Auction_likes_fk")
  notifications  Notifications[] @relation(map: "Auction_notifications_fk")
  pictures       Picture[]       @relation(map: "Auction_pictures_fk")
  purchases      Purchases[]     @relation(map: "Auction_purchases_fk")

  @@index([buyerId], map: "Auction_buyerId_fkey")
  @@index([fileId], map: "Auction_fileId_fkey")
  @@index([sellerId], map: "Auction_sellerId_fkey")
  @@index([stateId], map: "Auction_stateId_fkey")
  @@index([tagId], map: "Auction_tagId_fkey")
}

model Picture {
  id        Int     @id @default(autoincrement())
  path      String
  auctionId Int
  auction   Auction @relation(fields: [auctionId], references: [id], map: "Picture_auctionId_fk")

  @@index([auctionId], map: "Picture_auctionId_fkey")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  auctions Auction[]
}

model State {
  id        Int       @id @default(autoincrement())
  stateType String    @unique
  auctions  Auction[]
}
